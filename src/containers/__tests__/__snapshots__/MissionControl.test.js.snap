// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The MissionControl container renders on the page with no errors 1`] = `
<MissionControl
  location={
    Object {
      "state": Object {
        "readOnly": false,
      },
    }
  }
  store={
    Object {
      "dispatch": [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "payload": Promise {},
              "type": "FETCH_TAGS",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Promise {},
          },
        ],
      },
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <Grid>
    <div
      className="ui grid"
    >
      <GridRow>
        <div
          className="row"
        >
          <GridColumn
            width={3}
          >
            <div
              className="three wide column"
            >
              <GridRow>
                <div
                  className="row"
                >
                  <Segment
                    basic={true}
                    compact={true}
                  >
                    <div
                      className="ui basic compact segment"
                    >
                      <Component
                        location={
                          Object {
                            "state": Object {
                              "readOnly": false,
                            },
                          }
                        }
                      >
                        <div />
                      </Component>
                    </div>
                  </Segment>
                </div>
              </GridRow>
              <Divider>
                <div
                  className="ui divider"
                />
              </Divider>
              <GridRow>
                <div
                  className="row"
                >
                  <Header
                    as="h2"
                    textAlign="center"
                  >
                    <h2
                      className="ui center aligned header"
                    >
                      <FormattedMessage
                        defaultMessage="Tags"
                        id="app.mission_control.tags"
                        values={Object {}}
                      >
                        Tags
                      </FormattedMessage>
                    </h2>
                  </Header>
                  <withCookies(injectIntl(Connect(ProgramTags)))>
                    <withCookies(injectIntl(Connect(ProgramTags)))
                      cookies={
                        Cookies {
                          "HAS_DOCUMENT_COOKIE": true,
                          "changeListeners": Array [
                            [Function],
                          ],
                          "cookies": Object {},
                        }
                      }
                      forwardedRef={null}
                    >
                      <injectIntl(Connect(ProgramTags))
                        allCookies={Object {}}
                        cookies={
                          Cookies {
                            "HAS_DOCUMENT_COOKIE": true,
                            "changeListeners": Array [
                              [Function],
                            ],
                            "cookies": Object {},
                          }
                        }
                      >
                        <Connect(ProgramTags)
                          allCookies={Object {}}
                          cookies={
                            Cookies {
                              "HAS_DOCUMENT_COOKIE": true,
                              "changeListeners": Array [
                                [Function],
                              ],
                              "cookies": Object {},
                            }
                          }
                          intl={
                            Object {
                              "defaultFormats": Object {},
                              "defaultLocale": "en",
                              "formatDate": [Function],
                              "formatDateToParts": [Function],
                              "formatDisplayName": [Function],
                              "formatHTMLMessage": [Function],
                              "formatList": [Function],
                              "formatMessage": [Function],
                              "formatNumber": [Function],
                              "formatNumberToParts": [Function],
                              "formatPlural": [Function],
                              "formatRelativeTime": [Function],
                              "formatTime": [Function],
                              "formatTimeToParts": [Function],
                              "formats": Object {},
                              "formatters": Object {
                                "getDateTimeFormat": [Function],
                                "getDisplayNames": [Function],
                                "getListFormat": [Function],
                                "getMessageFormat": [Function],
                                "getNumberFormat": [Function],
                                "getPluralRules": [Function],
                                "getRelativeTimeFormat": [Function],
                              },
                              "locale": "en",
                              "messages": Object {},
                              "onError": [Function],
                              "textComponent": Symbol(react.fragment),
                              "timeZone": undefined,
                            }
                          }
                        >
                          <ProgramTags
                            allCookies={Object {}}
                            changeProgramTags={[Function]}
                            code={
                              Object {
                                "jsCode": "testcode",
                                "tags": Array [],
                              }
                            }
                            cookies={
                              Cookies {
                                "HAS_DOCUMENT_COOKIE": true,
                                "changeListeners": Array [
                                  [Function],
                                ],
                                "cookies": Object {},
                              }
                            }
                            fetchTags={[Function]}
                            intl={
                              Object {
                                "defaultFormats": Object {},
                                "defaultLocale": "en",
                                "formatDate": [Function],
                                "formatDateToParts": [Function],
                                "formatDisplayName": [Function],
                                "formatHTMLMessage": [Function],
                                "formatList": [Function],
                                "formatMessage": [Function],
                                "formatNumber": [Function],
                                "formatNumberToParts": [Function],
                                "formatPlural": [Function],
                                "formatRelativeTime": [Function],
                                "formatTime": [Function],
                                "formatTimeToParts": [Function],
                                "formats": Object {},
                                "formatters": Object {
                                  "getDateTimeFormat": [Function],
                                  "getDisplayNames": [Function],
                                  "getListFormat": [Function],
                                  "getMessageFormat": [Function],
                                  "getNumberFormat": [Function],
                                  "getPluralRules": [Function],
                                  "getRelativeTimeFormat": [Function],
                                },
                                "locale": "en",
                                "messages": Object {},
                                "onError": [Function],
                                "textComponent": Symbol(react.fragment),
                                "timeZone": undefined,
                              }
                            }
                            tag={
                              Object {
                                "error": null,
                                "isFetching": false,
                                "tags": Array [],
                              }
                            }
                          >
                            <Grid
                              centered={true}
                              container={true}
                            >
                              <div
                                className="ui centered container grid"
                              >
                                <GridRow>
                                  <div
                                    className="row"
                                  >
                                    <Dropdown
                                      additionLabel="Add "
                                      additionPosition="top"
                                      allowAdditions={true}
                                      closeOnBlur={true}
                                      closeOnChange={true}
                                      closeOnEscape={true}
                                      deburr={false}
                                      fluid={true}
                                      icon="dropdown"
                                      minCharacters={1}
                                      multiple={true}
                                      noResultsMessage="No results found."
                                      onAddItem={[Function]}
                                      onChange={[Function]}
                                      openOnFocus={true}
                                      options={Array []}
                                      placeholder="Add tags..."
                                      renderLabel={[Function]}
                                      search={true}
                                      searchInput="text"
                                      selectOnBlur={true}
                                      selectOnNavigation={true}
                                      selection={true}
                                      value={Array []}
                                      wrapSelection={true}
                                    >
                                      <Ref
                                        innerRef={
                                          Object {
                                            "current": <div
                                              aria-expanded="false"
                                              class="ui fluid multiple search selection dropdown"
                                              role="combobox"
                                            >
                                              <input
                                                aria-autocomplete="list"
                                                autocomplete="off"
                                                class="search"
                                                tabindex="0"
                                                type="text"
                                                value=""
                                              />
                                              <span
                                                class="sizer"
                                              />
                                              <div
                                                aria-atomic="true"
                                                aria-live="polite"
                                                class="default text"
                                                role="alert"
                                              >
                                                Add tags...
                                              </div>
                                              <i
                                                aria-hidden="true"
                                                class="dropdown icon"
                                              />
                                              <div
                                                aria-multiselectable="true"
                                                class="menu transition"
                                                role="listbox"
                                              >
                                                <div
                                                  class="message"
                                                >
                                                  No results found.
                                                </div>
                                              </div>
                                            </div>,
                                          }
                                        }
                                      >
                                        <RefFindNode
                                          innerRef={
                                            Object {
                                              "current": <div
                                                aria-expanded="false"
                                                class="ui fluid multiple search selection dropdown"
                                                role="combobox"
                                              >
                                                <input
                                                  aria-autocomplete="list"
                                                  autocomplete="off"
                                                  class="search"
                                                  tabindex="0"
                                                  type="text"
                                                  value=""
                                                />
                                                <span
                                                  class="sizer"
                                                />
                                                <div
                                                  aria-atomic="true"
                                                  aria-live="polite"
                                                  class="default text"
                                                  role="alert"
                                                >
                                                  Add tags...
                                                </div>
                                                <i
                                                  aria-hidden="true"
                                                  class="dropdown icon"
                                                />
                                                <div
                                                  aria-multiselectable="true"
                                                  class="menu transition"
                                                  role="listbox"
                                                >
                                                  <div
                                                    class="message"
                                                  >
                                                    No results found.
                                                  </div>
                                                </div>
                                              </div>,
                                            }
                                          }
                                        >
                                          <div
                                            aria-expanded={false}
                                            className="ui fluid multiple search selection dropdown"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onClick={[Function]}
                                            onFocus={[Function]}
                                            onMouseDown={[Function]}
                                            role="combobox"
                                          >
                                            <Ref
                                              innerRef={
                                                Object {
                                                  "current": <input
                                                    aria-autocomplete="list"
                                                    autocomplete="off"
                                                    class="search"
                                                    tabindex="0"
                                                    type="text"
                                                    value=""
                                                  />,
                                                }
                                              }
                                            >
                                              <RefFindNode
                                                innerRef={
                                                  Object {
                                                    "current": <input
                                                      aria-autocomplete="list"
                                                      autocomplete="off"
                                                      class="search"
                                                      tabindex="0"
                                                      type="text"
                                                      value=""
                                                    />,
                                                  }
                                                }
                                              >
                                                <DropdownSearchInput
                                                  autoComplete="off"
                                                  key="text"
                                                  onChange={[Function]}
                                                  style={
                                                    Object {
                                                      "width": undefined,
                                                    }
                                                  }
                                                  tabIndex={0}
                                                  type="text"
                                                  value=""
                                                >
                                                  <input
                                                    aria-autocomplete="list"
                                                    autoComplete="off"
                                                    className="search"
                                                    onChange={[Function]}
                                                    style={
                                                      Object {
                                                        "width": undefined,
                                                      }
                                                    }
                                                    tabIndex={0}
                                                    type="text"
                                                    value=""
                                                  />
                                                </DropdownSearchInput>
                                              </RefFindNode>
                                            </Ref>
                                            <span
                                              className="sizer"
                                            />
                                            <div
                                              aria-atomic={true}
                                              aria-live="polite"
                                              className="default text"
                                              role="alert"
                                            >
                                              Add tags...
                                            </div>
                                            <Icon
                                              as="i"
                                              className=""
                                              name="dropdown"
                                              onClick={[Function]}
                                            >
                                              <i
                                                aria-hidden="true"
                                                className="dropdown icon"
                                                onClick={[Function]}
                                              />
                                            </Icon>
                                            <DropdownMenu
                                              aria-multiselectable={true}
                                              role="listbox"
                                            >
                                              <div
                                                aria-multiselectable={true}
                                                className="menu transition"
                                                role="listbox"
                                              >
                                                <div
                                                  className="message"
                                                >
                                                  No results found.
                                                </div>
                                              </div>
                                            </DropdownMenu>
                                          </div>
                                        </RefFindNode>
                                      </Ref>
                                    </Dropdown>
                                  </div>
                                </GridRow>
                                <GridRow>
                                  <div
                                    className="row"
                                  >
                                    <Button
                                      as="button"
                                      disabled={true}
                                      onClick={[Function]}
                                      primary={true}
                                    >
                                      <Ref
                                        innerRef={
                                          Object {
                                            "current": <button
                                              class="ui primary disabled button"
                                              disabled=""
                                              tabindex="-1"
                                            >
                                              Save
                                            </button>,
                                          }
                                        }
                                      >
                                        <RefFindNode
                                          innerRef={
                                            Object {
                                              "current": <button
                                                class="ui primary disabled button"
                                                disabled=""
                                                tabindex="-1"
                                              >
                                                Save
                                              </button>,
                                            }
                                          }
                                        >
                                          <button
                                            className="ui primary disabled button"
                                            disabled={true}
                                            onClick={[Function]}
                                            tabIndex={-1}
                                          >
                                            <FormattedMessage
                                              defaultMessage="Save"
                                              id="app.program_tags.save"
                                              values={Object {}}
                                            >
                                              Save
                                            </FormattedMessage>
                                          </button>
                                        </RefFindNode>
                                      </Ref>
                                    </Button>
                                  </div>
                                </GridRow>
                              </div>
                            </Grid>
                          </ProgramTags>
                        </Connect(ProgramTags)>
                      </injectIntl(Connect(ProgramTags))>
                    </withCookies(injectIntl(Connect(ProgramTags)))>
                  </withCookies(injectIntl(Connect(ProgramTags)))>
                </div>
              </GridRow>
              <Divider>
                <div
                  className="ui divider"
                />
              </Divider>
              <GridRow>
                <div
                  className="row"
                >
                  <Segment
                    basic={true}
                    compact={true}
                  >
                    <div
                      className="ui basic compact segment"
                    >
                      <Component>
                        <div />
                      </Component>
                    </div>
                  </Segment>
                </div>
              </GridRow>
            </div>
          </GridColumn>
          <GridColumn
            width={10}
          >
            <div
              className="ten wide column"
            >
              <Component
                location={
                  Object {
                    "state": Object {
                      "readOnly": false,
                    },
                  }
                }
              >
                <div />
              </Component>
            </div>
          </GridColumn>
          <GridColumn
            width={3}
          >
            <div
              className="three wide column"
            >
              <GridRow
                style={
                  Object {
                    "marginLeft": "20px",
                    "marginRight": "20px",
                  }
                }
              >
                <div
                  className="row"
                  style={
                    Object {
                      "marginLeft": "20px",
                      "marginRight": "20px",
                    }
                  }
                >
                  <Connect(injectIntl(RoverConnection))>
                    <injectIntl(RoverConnection)
                      changeLeftSensorState={[Function]}
                      changeRightSensorState={[Function]}
                      commands={Array []}
                      connectToRover={[Function]}
                      disconnectFromRover={[Function]}
                      isFetching={false}
                      rovers={
                        Object {
                          "next": null,
                          "previous": null,
                          "results": Array [],
                        }
                      }
                      scanForRover={[Function]}
                      write={[Function]}
                    >
                      <RoverConnection
                        changeLeftSensorState={[Function]}
                        changeRightSensorState={[Function]}
                        commands={Array []}
                        connectToRover={[Function]}
                        disconnectFromRover={[Function]}
                        intl={
                          Object {
                            "defaultFormats": Object {},
                            "defaultLocale": "en",
                            "formatDate": [Function],
                            "formatDateToParts": [Function],
                            "formatDisplayName": [Function],
                            "formatHTMLMessage": [Function],
                            "formatList": [Function],
                            "formatMessage": [Function],
                            "formatNumber": [Function],
                            "formatNumberToParts": [Function],
                            "formatPlural": [Function],
                            "formatRelativeTime": [Function],
                            "formatTime": [Function],
                            "formatTimeToParts": [Function],
                            "formats": Object {},
                            "formatters": Object {
                              "getDateTimeFormat": [Function],
                              "getDisplayNames": [Function],
                              "getListFormat": [Function],
                              "getMessageFormat": [Function],
                              "getNumberFormat": [Function],
                              "getPluralRules": [Function],
                              "getRelativeTimeFormat": [Function],
                            },
                            "locale": "en",
                            "messages": Object {},
                            "onError": [Function],
                            "textComponent": Symbol(react.fragment),
                            "timeZone": undefined,
                          }
                        }
                        isFetching={false}
                        rover={null}
                        rovers={
                          Object {
                            "next": null,
                            "previous": null,
                            "results": Array [],
                          }
                        }
                        scanForRover={[Function]}
                        write={[Function]}
                      >
                        <Button
                          as="button"
                          disabled={false}
                          fluid={true}
                          onClick={[Function]}
                          primary={true}
                        >
                          <Ref
                            innerRef={
                              Object {
                                "current": <button
                                  class="ui fluid primary button"
                                >
                                  Connect to rover
                                </button>,
                              }
                            }
                          >
                            <RefFindNode
                              innerRef={
                                Object {
                                  "current": <button
                                    class="ui fluid primary button"
                                  >
                                    Connect to rover
                                  </button>,
                                }
                              }
                            >
                              <button
                                className="ui fluid primary button"
                                onClick={[Function]}
                              >
                                <FormattedMessage
                                  defaultMessage="Connect to rover"
                                  id="app.rover_connection.connect"
                                  values={Object {}}
                                >
                                  Connect to rover
                                </FormattedMessage>
                              </button>
                            </RefFindNode>
                          </Ref>
                        </Button>
                      </RoverConnection>
                    </injectIntl(RoverConnection)>
                  </Connect(injectIntl(RoverConnection))>
                </div>
              </GridRow>
              <Divider>
                <div
                  className="ui divider"
                />
              </Divider>
              <GridRow>
                <div
                  className="row"
                >
                  <Header
                    as="h2"
                    textAlign="center"
                  >
                    <h2
                      className="ui center aligned header"
                    >
                      <FormattedMessage
                        defaultMessage="Sensors"
                        id="app.mission_control.sensors"
                        values={Object {}}
                      >
                        Sensors
                      </FormattedMessage>
                    </h2>
                  </Header>
                  <Segment
                    raised={true}
                    style={
                      Object {
                        "margin": "10px",
                      }
                    }
                  >
                    <div
                      className="ui raised segment"
                      style={
                        Object {
                          "margin": "10px",
                        }
                      }
                    >
                      <Component>
                        <div />
                      </Component>
                    </div>
                  </Segment>
                </div>
              </GridRow>
              <Divider>
                <div
                  className="ui divider"
                />
              </Divider>
              <GridRow>
                <div
                  className="row"
                >
                  <Header
                    as="h2"
                    textAlign="center"
                  >
                    <h2
                      className="ui center aligned header"
                    >
                      <FormattedMessage
                        defaultMessage="Debug Console"
                        id="app.mission_control.console"
                        values={Object {}}
                      >
                        Debug Console
                      </FormattedMessage>
                    </h2>
                  </Header>
                  <Segment
                    style={
                      Object {
                        "margin": "10px",
                      }
                    }
                  >
                    <div
                      className="ui segment"
                      style={
                        Object {
                          "margin": "10px",
                        }
                      }
                    >
                      <Component>
                        <div />
                      </Component>
                    </div>
                  </Segment>
                </div>
              </GridRow>
            </div>
          </GridColumn>
        </div>
      </GridRow>
    </div>
  </Grid>
</MissionControl>
`;
