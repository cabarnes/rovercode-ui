// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The Workspace component renders on the page with no errors 1`] = `
<withCookies(Component)
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "payload": "test-code",
              "type": "UPDATE_JSCODE",
            },
          ],
          Array [
            Object {
              "payload": "test-dom-text",
              "type": "UPDATE_XMLCODE",
            },
          ],
          Array [
            Object {
              "payload": Promise {},
              "type": "SAVE_PROGRAM",
            },
          ],
          Array [
            Object {
              "type": "CLEAR",
            },
          ],
          Array [
            Object {
              "payload": "Rovercode console started",
              "type": "APPEND",
            },
          ],
          Array [
            Object {
              "payload": Promise {},
              "type": "CREATE_PROGRAM",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Promise {},
          },
          Object {
            "type": "return",
            "value": Promise {},
          },
          Object {
            "type": "return",
            "value": Promise {},
          },
          Object {
            "type": "return",
            "value": Promise {},
          },
          Object {
            "type": "return",
            "value": Promise {},
          },
          Object {
            "type": "return",
            "value": Promise {},
          },
        ],
      },
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <InjectIntl(Connect(Workspace))
    allCookies={Object {}}
    cookies={
      Cookies {
        "HAS_DOCUMENT_COOKIE": true,
        "changeListeners": Array [
          [Function],
        ],
        "cookies": Object {},
        "hooks": undefined,
      }
    }
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": Object {},
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "payload": "test-code",
                "type": "UPDATE_JSCODE",
              },
            ],
            Array [
              Object {
                "payload": "test-dom-text",
                "type": "UPDATE_XMLCODE",
              },
            ],
            Array [
              Object {
                "payload": Promise {},
                "type": "SAVE_PROGRAM",
              },
            ],
            Array [
              Object {
                "type": "CLEAR",
              },
            ],
            Array [
              Object {
                "payload": "Rovercode console started",
                "type": "APPEND",
              },
            ],
            Array [
              Object {
                "payload": Promise {},
                "type": "CREATE_PROGRAM",
              },
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": Promise {},
            },
            Object {
              "type": "return",
              "value": Promise {},
            },
            Object {
              "type": "return",
              "value": Promise {},
            },
            Object {
              "type": "return",
              "value": Promise {},
            },
            Object {
              "type": "return",
              "value": Promise {},
            },
            Object {
              "type": "return",
              "value": Promise {},
            },
          ],
        },
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <Connect(Workspace)
      allCookies={Object {}}
      cookies={
        Cookies {
          "HAS_DOCUMENT_COOKIE": true,
          "changeListeners": Array [
            [Function],
          ],
          "cookies": Object {},
          "hooks": undefined,
        }
      }
      intl={
        Object {
          "defaultFormats": Object {},
          "defaultLocale": "en",
          "formatDate": [Function],
          "formatHTMLMessage": [Function],
          "formatMessage": [Function],
          "formatNumber": [Function],
          "formatPlural": [Function],
          "formatRelative": [Function],
          "formatTime": [Function],
          "formats": Object {},
          "formatters": Object {
            "getDateTimeFormat": [Function],
            "getMessageFormat": [Function],
            "getNumberFormat": [Function],
            "getPluralFormat": [Function],
            "getRelativeFormat": [Function],
          },
          "locale": "en",
          "messages": Object {},
          "now": [Function],
          "onError": [Function],
          "textComponent": "span",
          "timeZone": null,
        }
      }
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "payload": "test-code",
                  "type": "UPDATE_JSCODE",
                },
              ],
              Array [
                Object {
                  "payload": "test-dom-text",
                  "type": "UPDATE_XMLCODE",
                },
              ],
              Array [
                Object {
                  "payload": Promise {},
                  "type": "SAVE_PROGRAM",
                },
              ],
              Array [
                Object {
                  "type": "CLEAR",
                },
              ],
              Array [
                Object {
                  "payload": "Rovercode console started",
                  "type": "APPEND",
                },
              ],
              Array [
                Object {
                  "payload": Promise {},
                  "type": "CREATE_PROGRAM",
                },
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Promise {},
              },
              Object {
                "type": "return",
                "value": Promise {},
              },
              Object {
                "type": "return",
                "value": Promise {},
              },
              Object {
                "type": "return",
                "value": Promise {},
              },
              Object {
                "type": "return",
                "value": Promise {},
              },
              Object {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <Workspace
        allCookies={Object {}}
        changeExecutionState={[Function]}
        changeReadOnly={[Function]}
        clearConsole={[Function]}
        code={
          Object {
            "execution": null,
            "id": 1,
            "jsCode": "",
            "name": "test program",
          }
        }
        cookies={
          Cookies {
            "HAS_DOCUMENT_COOKIE": true,
            "changeListeners": Array [
              [Function],
            ],
            "cookies": Object {},
            "hooks": undefined,
          }
        }
        createProgram={[Function]}
        fetchProgram={[Function]}
        intl={
          Object {
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "formatDate": [Function],
            "formatHTMLMessage": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatPlural": [Function],
            "formatRelative": [Function],
            "formatTime": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralFormat": [Function],
              "getRelativeFormat": [Function],
            },
            "locale": "en",
            "messages": Object {},
            "now": [Function],
            "onError": [Function],
            "textComponent": "span",
            "timeZone": null,
          }
        }
        rover={
          Object {
            "transmitChannel": Object {
              "writeValue": [MockFunction],
            },
          }
        }
        saveProgram={[Function]}
        sendToRover={[Function]}
        sensor={
          Object {
            "left": 2,
            "right": 2,
          }
        }
        store={
          Object {
            "clearActions": [Function],
            "dispatch": [MockFunction] {
              "calls": Array [
                Array [
                  Object {
                    "payload": "test-code",
                    "type": "UPDATE_JSCODE",
                  },
                ],
                Array [
                  Object {
                    "payload": "test-dom-text",
                    "type": "UPDATE_XMLCODE",
                  },
                ],
                Array [
                  Object {
                    "payload": Promise {},
                    "type": "SAVE_PROGRAM",
                  },
                ],
                Array [
                  Object {
                    "type": "CLEAR",
                  },
                ],
                Array [
                  Object {
                    "payload": "Rovercode console started",
                    "type": "APPEND",
                  },
                ],
                Array [
                  Object {
                    "payload": Promise {},
                    "type": "CREATE_PROGRAM",
                  },
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": Promise {},
                },
                Object {
                  "type": "return",
                  "value": Promise {},
                },
                Object {
                  "type": "return",
                  "value": Promise {},
                },
                Object {
                  "type": "return",
                  "value": Promise {},
                },
                Object {
                  "type": "return",
                  "value": Promise {},
                },
                Object {
                  "type": "return",
                  "value": Promise {},
                },
              ],
            },
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          }
        }
        storeSubscription={
          Subscription {
            "listeners": Object {
              "clear": [Function],
              "get": [Function],
              "notify": [Function],
              "subscribe": [Function],
            },
            "onStateChange": [Function],
            "parentSub": undefined,
            "store": Object {
              "clearActions": [Function],
              "dispatch": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "payload": "test-code",
                      "type": "UPDATE_JSCODE",
                    },
                  ],
                  Array [
                    Object {
                      "payload": "test-dom-text",
                      "type": "UPDATE_XMLCODE",
                    },
                  ],
                  Array [
                    Object {
                      "payload": Promise {},
                      "type": "SAVE_PROGRAM",
                    },
                  ],
                  Array [
                    Object {
                      "type": "CLEAR",
                    },
                  ],
                  Array [
                    Object {
                      "payload": "Rovercode console started",
                      "type": "APPEND",
                    },
                  ],
                  Array [
                    Object {
                      "payload": Promise {},
                      "type": "CREATE_PROGRAM",
                    },
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
            "unsubscribe": [Function],
          }
        }
        updateJsCode={[Function]}
        updateXmlCode={[Function]}
        writeToConsole={[Function]}
      >
        <Container
          style={
            Object {
              "height": "80vh",
            }
          }
        >
          <div
            className="ui container"
            style={
              Object {
                "height": "80vh",
              }
            }
          >
            <div
              id="blocklyDiv"
            >
              <div
                style={
                  Object {
                    "bottom": 30,
                    "position": "absolute",
                    "right": 100,
                  }
                }
              >
                <div />
              </div>
            </div>
          </div>
        </Container>
      </Workspace>
    </Connect(Workspace)>
  </InjectIntl(Connect(Workspace))>
</withCookies(Component)>
`;
