// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The ProgramName component renders on the page with no errors 1`] = `
<withCookies(injectIntl(Connect(ProgramName)))
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [MockFunction],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <withCookies(injectIntl(Connect(ProgramName)))
    cookies={
      Cookies {
        "HAS_DOCUMENT_COOKIE": true,
        "changeListeners": Array [
          [Function],
        ],
        "cookies": Object {},
      }
    }
    forwardedRef={null}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [MockFunction],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <injectIntl(Connect(ProgramName))
      allCookies={Object {}}
      cookies={
        Cookies {
          "HAS_DOCUMENT_COOKIE": true,
          "changeListeners": Array [
            [Function],
          ],
          "cookies": Object {},
        }
      }
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [MockFunction],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <Connect(ProgramName)
        allCookies={Object {}}
        cookies={
          Cookies {
            "HAS_DOCUMENT_COOKIE": true,
            "changeListeners": Array [
              [Function],
            ],
            "cookies": Object {},
          }
        }
        intl={
          Object {
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "formatDate": [Function],
            "formatDateToParts": [Function],
            "formatDisplayName": [Function],
            "formatHTMLMessage": [Function],
            "formatList": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatNumberToParts": [Function],
            "formatPlural": [Function],
            "formatRelativeTime": [Function],
            "formatTime": [Function],
            "formatTimeToParts": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getDisplayNames": [Function],
              "getListFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralRules": [Function],
              "getRelativeTimeFormat": [Function],
            },
            "locale": "en",
            "messages": Object {},
            "onError": [Function],
            "textComponent": Symbol(react.fragment),
            "timeZone": undefined,
          }
        }
        store={
          Object {
            "clearActions": [Function],
            "dispatch": [MockFunction],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          }
        }
      >
        <ProgramName
          allCookies={Object {}}
          changeName={[Function]}
          code={
            Object {
              "isReadOnly": false,
              "name": "test name",
            }
          }
          cookies={
            Cookies {
              "HAS_DOCUMENT_COOKIE": true,
              "changeListeners": Array [
                [Function],
              ],
              "cookies": Object {},
            }
          }
          intl={
            Object {
              "defaultFormats": Object {},
              "defaultLocale": "en",
              "formatDate": [Function],
              "formatDateToParts": [Function],
              "formatDisplayName": [Function],
              "formatHTMLMessage": [Function],
              "formatList": [Function],
              "formatMessage": [Function],
              "formatNumber": [Function],
              "formatNumberToParts": [Function],
              "formatPlural": [Function],
              "formatRelativeTime": [Function],
              "formatTime": [Function],
              "formatTimeToParts": [Function],
              "formats": Object {},
              "formatters": Object {
                "getDateTimeFormat": [Function],
                "getDisplayNames": [Function],
                "getListFormat": [Function],
                "getMessageFormat": [Function],
                "getNumberFormat": [Function],
                "getPluralRules": [Function],
                "getRelativeTimeFormat": [Function],
              },
              "locale": "en",
              "messages": Object {},
              "onError": [Function],
              "textComponent": Symbol(react.fragment),
              "timeZone": undefined,
            }
          }
          store={
            Object {
              "clearActions": [Function],
              "dispatch": [MockFunction],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            }
          }
        >
          <Input
            disabled={false}
            label="Name:"
            onChange={[Function]}
            type="text"
            value="test name"
          >
            <div
              className="ui labeled input"
            >
              <Label
                className="label"
                content="Name:"
              >
                <div
                  className="ui label label"
                  onClick={[Function]}
                >
                  Name:
                </div>
              </Label>
              <input
                disabled={false}
                onChange={[Function]}
                type="text"
                value="test name"
              />
            </div>
          </Input>
          <Confirm
            cancelButton="Cancel"
            confirmButton="OK"
            content="Are you sure that you want to change the name of this program?"
            onCancel={[Function]}
            onConfirm={[Function]}
            open={false}
            size="small"
          >
            <Modal
              centered={true}
              closeOnDimmerClick={true}
              closeOnDocumentClick={false}
              dimmer={true}
              eventPool="Modal"
              onClose={[Function]}
              open={false}
              size="small"
            >
              <Portal
                closeOnDocumentClick={false}
                closeOnEscape={true}
                eventPool="Modal"
                mountNode={<body />}
                onClose={[Function]}
                onMount={[Function]}
                onOpen={[Function]}
                onUnmount={[Function]}
                open={false}
                openOnTriggerClick={true}
              />
            </Modal>
          </Confirm>
        </ProgramName>
      </Connect(ProgramName)>
    </injectIntl(Connect(ProgramName))>
  </withCookies(injectIntl(Connect(ProgramName)))>
</withCookies(injectIntl(Connect(ProgramName)))>
`;
