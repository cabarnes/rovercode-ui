// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The ProgramTags component renders on the page with no errors 1`] = `
<withCookies(injectIntl(Connect(ProgramTags)))
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "payload": Promise {},
              "type": "FETCH_TAGS",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Promise {},
          },
        ],
      },
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <withCookies(injectIntl(Connect(ProgramTags)))
    cookies={
      Cookies {
        "HAS_DOCUMENT_COOKIE": true,
        "changeListeners": Array [
          [Function],
        ],
        "cookies": Object {},
      }
    }
    forwardedRef={null}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "payload": Promise {},
                "type": "FETCH_TAGS",
              },
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": Promise {},
            },
          ],
        },
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <injectIntl(Connect(ProgramTags))
      allCookies={Object {}}
      cookies={
        Cookies {
          "HAS_DOCUMENT_COOKIE": true,
          "changeListeners": Array [
            [Function],
          ],
          "cookies": Object {},
        }
      }
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "payload": Promise {},
                  "type": "FETCH_TAGS",
                },
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <Connect(ProgramTags)
        allCookies={Object {}}
        cookies={
          Cookies {
            "HAS_DOCUMENT_COOKIE": true,
            "changeListeners": Array [
              [Function],
            ],
            "cookies": Object {},
          }
        }
        intl={
          Object {
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "formatDate": [Function],
            "formatDateToParts": [Function],
            "formatDisplayName": [Function],
            "formatHTMLMessage": [Function],
            "formatList": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatNumberToParts": [Function],
            "formatPlural": [Function],
            "formatRelativeTime": [Function],
            "formatTime": [Function],
            "formatTimeToParts": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getDisplayNames": [Function],
              "getListFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralRules": [Function],
              "getRelativeTimeFormat": [Function],
            },
            "locale": "en",
            "messages": Object {},
            "onError": [Function],
            "textComponent": Symbol(react.fragment),
            "timeZone": undefined,
          }
        }
        store={
          Object {
            "clearActions": [Function],
            "dispatch": [MockFunction] {
              "calls": Array [
                Array [
                  Object {
                    "payload": Promise {},
                    "type": "FETCH_TAGS",
                  },
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": Promise {},
                },
              ],
            },
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          }
        }
      >
        <ProgramTags
          allCookies={Object {}}
          changeProgramTags={[Function]}
          code={
            Object {
              "isReadOnly": false,
              "tags": Array [
                "tag1",
                "tag2",
              ],
            }
          }
          cookies={
            Cookies {
              "HAS_DOCUMENT_COOKIE": true,
              "changeListeners": Array [
                [Function],
              ],
              "cookies": Object {},
            }
          }
          fetchTags={[Function]}
          intl={
            Object {
              "defaultFormats": Object {},
              "defaultLocale": "en",
              "formatDate": [Function],
              "formatDateToParts": [Function],
              "formatDisplayName": [Function],
              "formatHTMLMessage": [Function],
              "formatList": [Function],
              "formatMessage": [Function],
              "formatNumber": [Function],
              "formatNumberToParts": [Function],
              "formatPlural": [Function],
              "formatRelativeTime": [Function],
              "formatTime": [Function],
              "formatTimeToParts": [Function],
              "formats": Object {},
              "formatters": Object {
                "getDateTimeFormat": [Function],
                "getDisplayNames": [Function],
                "getListFormat": [Function],
                "getMessageFormat": [Function],
                "getNumberFormat": [Function],
                "getPluralRules": [Function],
                "getRelativeTimeFormat": [Function],
              },
              "locale": "en",
              "messages": Object {},
              "onError": [Function],
              "textComponent": Symbol(react.fragment),
              "timeZone": undefined,
            }
          }
          store={
            Object {
              "clearActions": [Function],
              "dispatch": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "payload": Promise {},
                      "type": "FETCH_TAGS",
                    },
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            }
          }
          tag={
            Object {
              "tags": Array [
                Object {
                  "name": "tag1",
                },
                Object {
                  "name": "tag2",
                },
                Object {
                  "name": "tag3",
                },
              ],
            }
          }
        >
          <Grid
            centered={true}
            container={true}
          >
            <div
              className="ui centered container grid"
            >
              <GridRow>
                <div
                  className="row"
                >
                  <Dropdown
                    additionLabel="Add "
                    additionPosition="top"
                    allowAdditions={true}
                    closeOnBlur={true}
                    closeOnChange={true}
                    closeOnEscape={true}
                    deburr={false}
                    disabled={false}
                    fluid={true}
                    icon="dropdown"
                    minCharacters={1}
                    multiple={true}
                    noResultsMessage="No results found."
                    onAddItem={[Function]}
                    onChange={[Function]}
                    openOnFocus={true}
                    options={
                      Array [
                        Object {
                          "key": "tag1",
                          "text": "tag1",
                          "value": "tag1",
                        },
                        Object {
                          "key": "tag2",
                          "text": "tag2",
                          "value": "tag2",
                        },
                        Object {
                          "key": "tag3",
                          "text": "tag3",
                          "value": "tag3",
                        },
                      ]
                    }
                    placeholder="Add tags..."
                    renderLabel={[Function]}
                    search={true}
                    searchInput="text"
                    selectOnBlur={true}
                    selectOnNavigation={true}
                    selection={true}
                    value={
                      Array [
                        "tag1",
                        "tag2",
                      ]
                    }
                    wrapSelection={true}
                  >
                    <Ref
                      innerRef={
                        Object {
                          "current": <div
                            aria-disabled="false"
                            aria-expanded="false"
                            class="ui fluid multiple search selection dropdown"
                            role="combobox"
                          >
                            <a
                              class="ui label"
                              value="tag1"
                            >
                              tag1
                              <i
                                aria-hidden="true"
                                class="delete icon"
                              />
                            </a>
                            <a
                              class="ui label"
                              value="tag2"
                            >
                              tag2
                              <i
                                aria-hidden="true"
                                class="delete icon"
                              />
                            </a>
                            <input
                              aria-autocomplete="list"
                              autocomplete="off"
                              class="search"
                              tabindex="0"
                              type="text"
                              value=""
                            />
                            <span
                              class="sizer"
                            />
                            <div
                              aria-atomic="true"
                              aria-live="polite"
                              class="text"
                              role="alert"
                            />
                            <i
                              aria-hidden="true"
                              class="dropdown icon"
                            />
                            <div
                              aria-multiselectable="true"
                              class="menu transition"
                              role="listbox"
                            >
                              <div
                                aria-checked="false"
                                aria-selected="true"
                                class="selected item"
                                role="option"
                                style="pointer-events: all;"
                              >
                                <span
                                  class="text"
                                >
                                  tag3
                                </span>
                              </div>
                            </div>
                          </div>,
                        }
                      }
                    >
                      <RefFindNode
                        innerRef={
                          Object {
                            "current": <div
                              aria-disabled="false"
                              aria-expanded="false"
                              class="ui fluid multiple search selection dropdown"
                              role="combobox"
                            >
                              <a
                                class="ui label"
                                value="tag1"
                              >
                                tag1
                                <i
                                  aria-hidden="true"
                                  class="delete icon"
                                />
                              </a>
                              <a
                                class="ui label"
                                value="tag2"
                              >
                                tag2
                                <i
                                  aria-hidden="true"
                                  class="delete icon"
                                />
                              </a>
                              <input
                                aria-autocomplete="list"
                                autocomplete="off"
                                class="search"
                                tabindex="0"
                                type="text"
                                value=""
                              />
                              <span
                                class="sizer"
                              />
                              <div
                                aria-atomic="true"
                                aria-live="polite"
                                class="text"
                                role="alert"
                              />
                              <i
                                aria-hidden="true"
                                class="dropdown icon"
                              />
                              <div
                                aria-multiselectable="true"
                                class="menu transition"
                                role="listbox"
                              >
                                <div
                                  aria-checked="false"
                                  aria-selected="true"
                                  class="selected item"
                                  role="option"
                                  style="pointer-events: all;"
                                >
                                  <span
                                    class="text"
                                  >
                                    tag3
                                  </span>
                                </div>
                              </div>
                            </div>,
                          }
                        }
                      >
                        <div
                          aria-disabled={false}
                          aria-expanded={false}
                          className="ui fluid multiple search selection dropdown"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onClick={[Function]}
                          onFocus={[Function]}
                          onMouseDown={[Function]}
                          role="combobox"
                        >
                          <Label
                            active={false}
                            as="a"
                            content="tag1"
                            key="tag1"
                            onClick={[Function]}
                            onRemove={[Function]}
                            value="tag1"
                          >
                            <a
                              className="ui label"
                              onClick={[Function]}
                              value="tag1"
                            >
                              tag1
                              <Icon
                                as="i"
                                name="delete"
                                onClick={[Function]}
                              >
                                <i
                                  aria-hidden="true"
                                  className="delete icon"
                                  onClick={[Function]}
                                />
                              </Icon>
                            </a>
                          </Label>
                          <Label
                            active={false}
                            as="a"
                            content="tag2"
                            key="tag2"
                            onClick={[Function]}
                            onRemove={[Function]}
                            value="tag2"
                          >
                            <a
                              className="ui label"
                              onClick={[Function]}
                              value="tag2"
                            >
                              tag2
                              <Icon
                                as="i"
                                name="delete"
                                onClick={[Function]}
                              >
                                <i
                                  aria-hidden="true"
                                  className="delete icon"
                                  onClick={[Function]}
                                />
                              </Icon>
                            </a>
                          </Label>
                          <Ref
                            innerRef={
                              Object {
                                "current": <input
                                  aria-autocomplete="list"
                                  autocomplete="off"
                                  class="search"
                                  tabindex="0"
                                  type="text"
                                  value=""
                                />,
                              }
                            }
                          >
                            <RefFindNode
                              innerRef={
                                Object {
                                  "current": <input
                                    aria-autocomplete="list"
                                    autocomplete="off"
                                    class="search"
                                    tabindex="0"
                                    type="text"
                                    value=""
                                  />,
                                }
                              }
                            >
                              <DropdownSearchInput
                                autoComplete="off"
                                key="text"
                                onChange={[Function]}
                                style={
                                  Object {
                                    "width": undefined,
                                  }
                                }
                                tabIndex={0}
                                type="text"
                                value=""
                              >
                                <input
                                  aria-autocomplete="list"
                                  autoComplete="off"
                                  className="search"
                                  onChange={[Function]}
                                  style={
                                    Object {
                                      "width": undefined,
                                    }
                                  }
                                  tabIndex={0}
                                  type="text"
                                  value=""
                                />
                              </DropdownSearchInput>
                            </RefFindNode>
                          </Ref>
                          <span
                            className="sizer"
                          />
                          <div
                            aria-atomic={true}
                            aria-live="polite"
                            className="text"
                            role="alert"
                          />
                          <Icon
                            as="i"
                            className=""
                            name="dropdown"
                            onClick={[Function]}
                          >
                            <i
                              aria-hidden="true"
                              className="dropdown icon"
                              onClick={[Function]}
                            />
                          </Icon>
                          <DropdownMenu
                            aria-multiselectable={true}
                            role="listbox"
                          >
                            <div
                              aria-multiselectable={true}
                              className="menu transition"
                              role="listbox"
                            >
                              <DropdownItem
                                active={false}
                                key="tag3"
                                onClick={[Function]}
                                selected={true}
                                style={
                                  Object {
                                    "pointerEvents": "all",
                                  }
                                }
                                text="tag3"
                                value="tag3"
                              >
                                <div
                                  aria-checked={false}
                                  aria-selected={true}
                                  className="selected item"
                                  onClick={[Function]}
                                  role="option"
                                  style={
                                    Object {
                                      "pointerEvents": "all",
                                    }
                                  }
                                >
                                  <span
                                    className="text"
                                  >
                                    tag3
                                  </span>
                                </div>
                              </DropdownItem>
                            </div>
                          </DropdownMenu>
                        </div>
                      </RefFindNode>
                    </Ref>
                  </Dropdown>
                </div>
              </GridRow>
              <GridRow>
                <div
                  className="row"
                >
                  <Button
                    as="button"
                    disabled={true}
                    onClick={[Function]}
                    primary={true}
                  >
                    <Ref
                      innerRef={
                        Object {
                          "current": <button
                            class="ui primary disabled button"
                            disabled=""
                            tabindex="-1"
                          >
                            Save
                          </button>,
                        }
                      }
                    >
                      <RefFindNode
                        innerRef={
                          Object {
                            "current": <button
                              class="ui primary disabled button"
                              disabled=""
                              tabindex="-1"
                            >
                              Save
                            </button>,
                          }
                        }
                      >
                        <button
                          className="ui primary disabled button"
                          disabled={true}
                          onClick={[Function]}
                          tabIndex={-1}
                        >
                          <FormattedMessage
                            defaultMessage="Save"
                            id="app.program_tags.save"
                            values={Object {}}
                          >
                            Save
                          </FormattedMessage>
                        </button>
                      </RefFindNode>
                    </Ref>
                  </Button>
                </div>
              </GridRow>
            </div>
          </Grid>
        </ProgramTags>
      </Connect(ProgramTags)>
    </injectIntl(Connect(ProgramTags))>
  </withCookies(injectIntl(Connect(ProgramTags)))>
</withCookies(injectIntl(Connect(ProgramTags)))>
`;
